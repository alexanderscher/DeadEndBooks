generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id          Int       @id @default(autoincrement())
  title       String
  author      String
  publisher   String
  medium      String
  photo_front String
  photo_back  String
  inStock     Boolean
  Queue       Queue[]
  Current     Current[]
  History     History[]
  Cart        Cart[]
  Saved       Saved[]
}

model Current {
  id          Int      @id @default(autoincrement())
  bookId      Int
  book        Book     @relation(fields: [bookId], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  start_date  DateTime
  return_date DateTime
}

model History {
  id          Int      @id @default(autoincrement())
  bookId      Int
  book        Book     @relation(fields: [bookId], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  start_date  DateTime
  return_date DateTime
}

model Queue {
  id     Int      @id @default(autoincrement())
  bookId Int
  book   Book     @relation(fields: [bookId], references: [id])
  User   User?    @relation(fields: [userId], references: [id])
  userId Int?
  date   DateTime
}

model Cart {
  id     Int   @id @default(autoincrement())
  bookId Int
  book   Book  @relation(fields: [bookId], references: [id])
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Saved {
  id     Int   @id @default(autoincrement())
  bookId Int
  book   Book  @relation(fields: [bookId], references: [id])
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Address {
  id      Int    @id @default(autoincrement())
  address String
  zipcode String
  city    String
  state   String
  country String
  phone   String
  userId  Int    @unique
  user    User   @relation(name: "UserAddress", fields: [userId], references: [id])
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  name       String
  admin      Boolean
  address    Address?  @relation(name: "UserAddress")
  subscribed Boolean
  Current    Current[]
  History    History[]
  Queue      Queue[]
  Cart       Cart[]
  Saved      Saved[]
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
