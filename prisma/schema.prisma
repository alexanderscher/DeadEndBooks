generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id          Int         @id @default(autoincrement())
  title       String
  author      String
  publisher   String
  medium      String
  photo_front String
  pf_fileKey  String
  photo_back  String
  pb_fileKey  String
  inStock     Boolean
  Current     Current[]
  History     History[]
  Cart        Cart[]
  Saved       Saved[]
  orderBooks  OrderBook[]
  Returned    Returned[]
}

model Current {
  id          Int      @id @default(autoincrement())
  bookId      Int
  book        Book     @relation(fields: [bookId], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  start_date  DateTime
  return_date DateTime
  orderId     Int
  order       Orders   @relation(fields: [orderId], references: [id])

  @@unique([orderId, bookId])
}

model History {
  id          Int      @id @default(autoincrement())
  bookId      Int
  book        Book     @relation(fields: [bookId], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  start_date  DateTime
  return_date DateTime
}

model Cart {
  id     Int   @id @default(autoincrement())
  bookId Int
  book   Book  @relation(fields: [bookId], references: [id])
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Saved {
  id     Int   @id @default(autoincrement())
  bookId Int
  book   Book  @relation(fields: [bookId], references: [id])
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Address {
  id      Int    @id @default(autoincrement())
  name    String
  address String
  zipcode String
  city    String
  state   String
  country String
  phone   String
  userId  Int
  User    User?  @relation(fields: [userId], references: [id])
}

model User {
  id                       Int       @id @default(autoincrement())
  email                    String    @unique
  password                 String
  name                     String
  admin                    Boolean
  address                  Address[]
  Current                  Current[]
  History                  History[]
  Cart                     Cart[]
  Saved                    Saved[]
  stripeCustomerId         String?   @unique
  subscriptionDate         DateTime?
  isActive                 Boolean   @default(false)
  subscriptionID           String?
  subscriptionType         String?
  Orders                   Orders[]
  newsletter               Boolean   @default(true)
  resetPasswordToken       String?   @unique
  resetPasswordTokenExpiry DateTime?
}

model OrderAddress {
  id      Int    @id @default(autoincrement())
  name    String
  address String
  zipcode String
  city    String
  state   String
  country String
  phone   String
  orderId Int    @unique
  order   Orders @relation(fields: [orderId], references: [id])
}

model Returned {
  orderId  Int
  order    Orders  @relation(fields: [orderId], references: [id])
  bookId   Int
  book     Book    @relation(fields: [bookId], references: [id])
  returned Boolean @default(false)

  @@id([orderId, bookId])
}

model Orders {
  id          Int           @id @default(autoincrement())
  userId      Int
  User        User          @relation(fields: [userId], references: [id])
  books       OrderBook[]
  address     OrderAddress?
  shipped     Boolean
  returned    Returned[]
  order_date  DateTime
  start_date  DateTime
  return_date DateTime
  Currents    Current[]
}

model OrderBook {
  orderId Int
  order   Orders @relation(fields: [orderId], references: [id])
  bookId  Int
  book    Book   @relation(fields: [bookId], references: [id])

  @@id([orderId, bookId])
}
